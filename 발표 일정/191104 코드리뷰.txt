<코드리뷰>
변수, 함수명 이름 잘 짓자

c++ 스타일을 파이썬에 적용하는 경우
-> 파이썬으로 짤 필요가 없다. 그럴거면 c++로 짜지

폴더에 한글 이름 절대 쓰지 말 것

강현석 / 이동규 / 김영준 / 강태언 코드리뷰
-----------------------------------------------------
강현석 

- 폴더 Reousrce, Code, Presentation 별로 세부정리 되어있는거 좋다.

- 리소스 폴더를 잘 정리했다. 

- class Player를 담을 때 Player.py 식으로 따로 만들어주는게 좋다.

- << ★ 내가 만들 게임 Player에게 네이밍을 붙여주는게 좋다. >>(다른 구조와 만나면 헷갈릴 수 있으므로)

- state 변수를 전역으로 썼다. direction이나 state나 똑같은 의미, 또한 1이 뭔지 -1이 뭔지 0이 뭔지
  설명해야한다. (코드가 아니라 암호다)

- Jump == True : state로 들어가는게 더 낫다.
-> 전체적으로 state에 대한 구조가 빈약하다. 
-> 파이참을 사용할 때에는 Jump is True: 로 치환하는게 더 낫다.
<< ★ ( == true 같은거 쓰지 마라) >>

- jump는 동사다. 플레이어가 점프중인 상태를 나타내는 변수로는 jumping이 더 어울린다.
-> if에 오는 것은 ~이면 같이 상태나 조건, 명사가 와서도 안되고, 동사가 와서도 안되고
-> 형용사가 오는 것이 더 어울린다. << ★ 파이썬에는 Refactor 기능이 있는데 변수 우클릭 후 이 기능을 사용하면
-> 파이썬 파일 내에 모든 변수명이 내가 원하는 이름으로 다 바뀐다 >>

- 가속도 조절은 acceleration이 아니라 velocity, acceleration이 감소되는건 말이 안된다.
-> 점프 속도조절은 중력가속도 공식을 사용하는게 좋다.

- interRect -> intersected_rectangle : 충돌체크를 위한 사각형 영역을 나타내고 싶으면 이런 변수명이 더 낫다.
-> 어떤건 대소문자고 어떤건 소문자, 변수 이름 짓는데 일관성이 없다.

- isDraw 변수명 : 이 타일이 그려졌냐 그려지지 않았냐 를 하는 역할
-> visible 로 수정하는 것이 더 좋다.

- InterH : intersect_height, intersect_width 식으로 짓는것이 더 낫다. <<★ 변수에 일관성>>

- 함수 역할을 제대로 나타낼 수 있도록 이름을 지어라
interRect -> check_rectangle_intersected : 사각형이 겹쳐졌는지를 체크하라 라는 함수이므로

- rectangle 변수를 만들때 pico2d 좌표계와 일치시켜 만들어라 좌/아래/우/상 식으로

- json 포맷으로 파일 관리하는 법을 이야기 해줄 것
-> 코드안에 맵같이 데이터가 들어가 있는건 별로다,
-> 바깥으로 데이터를 빼고 read해서 데이터를 넣을 수 있도록 하는 것이 더 좋다. 
-> << ★ 코드에서 데이터를 철저하게 분리해서 빼주어야 한다. 데이터는 밖에 존재하고 읽어서 써야 한다. >>

- cnt = 0 : 기억이 안난다...? 이름 대충지으면 한달 뒤에는 50%를 이해하고, 
1년 뒤에는 '이런 쓰레기코드를 누가 짰지?' 라는 생각이 들 것이다.

- range(0, 25) 보다는 range(25) : 0, 을 쓸필요가 없다.

- 상수 우클릭 -> Refactor -> Extract -> Constatnt : 식으로 가독성 높게 상수를 바꿀 수 있다.
-> 파이썬에 상수 개념은 없으니 변수로 쓰면 되나, 대문자로 쓰게되면 상수라고 대충 이해할 수 있다.
-> 코드에 가독성이 높아진다. 다른 사람이 해석하기 어려운 의미없는 숫자를 쓰지 마라.

- Map_Size = [800, 450] 보다는 MAP_WIDTH = 800, MAP_HEIGHT = 450 으로 바꿔주는 것이 좋다.
리스트 사용은 많은 데이터를 하나로 그룹핑할 때 사용한다.
굳이 쓰고싶다면 리스트보다는 tuple을 사용할 것. (값이 변하지 않는거)
-----------------------------------------------------
★ ★ ★ ★ ★ 이동규

- << ★ 폴더 정리 + 한글 이름 절대 쓰지 말것, 문서 파일 외에는 다 영어로 쓸 것 >>

- Map_Tool : 띄어쓰기보다는 언더바 쓰는 것을 더 좋아함. 뭐 이건 개인 취향이니 터치안함

- enum보다는 A, B, C = range(3) 식으로 사용 굳이 쓸 필요가 없다 enum을
-> 내부적인 값을 쓰기 위해서 쓸거면 저게 더 낫다. 
-> << ★  너무 체계화시키려 하다보면 유연성을 놓칠 우려가 있다. >>

- 구조체보다는 class, 리스트, 튜플을 더 권장

- 파이썬에는 포지션 알규먼트가 있어서
func(a=3, b=4) 이렇게 입력할 수가 있다. 
px, py를 안쓰면 default가 들어가고 쓸때는 다른 값이 들어간다.
px=None, py=None 이렇게 쓰지 말고, px=500, py=500 해서 아예 디폴트 값을 집어넣고
if else로 비교 안해도 된다. 

Block 생성할때 px, py 조정하고 싶으면 a_Block = Block(px = 500, py = 200) 식으로 조정 가능
내가 원하는 인자만 조절할 수 있다.

포지션 알규먼트 / 네임드 알규먼트

- image_multiple_size -> image_scale 로 변수 바꿔주는게 더 낫다.
-> image에서만 쓸거면 -> scale

- block_origin_size -> block_width, block_height = 26, 26
-> draw는 여러 번 불린다. 이 코드에서 가장 많이 불리는게 draw, draw 안에서 쓸데없이 상수값을 대입하고 있다.
-> 최적화 관점에서 가장 거지같은 코드
-> 위로 빼놔라

- if elif elif.....  계산을 table로 지정해놓으면 된다. 실시간으로 계산할 이유가 없다. 몽땅 다 table화 시킬 수 있기 때문에
-> 하드코딩하지말고 table로 바꿔두어라 (1줄이면 끝난다.)
self.image.h - 40도 계속 불리잖아
참고용 링크 : https://victorydntmd.tistory.com/241
오프라인 계산은 이럴 때 하는거다.

draw 내에서 필요한 코드는 그릴 때 밖에 없다.

- 카메라에서 w,a,s,d 입력을 dictionary_key로 생각하면 한줄이면 끝난다.

- KeyMapping 을 이용하는 방법이 더 좋다
-> ctrl키를 누르고 s를 누르면 세이브가 되는가? 된다, s 먼저 누르고 컨트롤 누르면? -> 안된다.
-> 동시 체크가 아니다. 접근이 잘못됐다. 순서대로 눌러야한다.
-> 동시체크에는 괜찮음

- 변수명 길게 잘 짓는 습관은 좋다.
-----------------------------------------------------
강태언

- 폴더 이름이 마음에 안든다 Produce? 동사, 게임 이름이 Produce면 의미가 있으나,,,

- 개발 순서가 되게 잘못됐다.
-> 캐릭터 컨트롤러가 먼저, 그 게임에서 가장 핵심이 되는 주인공 클래스가 먼저이다.
-> 그거 없이 빌딩 먼저 만들어두면 에러지

- building.py 안에서 빌딩 이름의 클래스가 여러 개 있는데 묶어두는 것이 더 좋다.

- self.' 'image 공란 한 이유? 왜 했대 : 코드가 잘 읽혀질려면 각각 요소들이 일관성있게 잘 정리가 되어있어야 한다.
-> 그것을 지켜줘야 한다.

- Happy 역할이 상태 바면 HappyStatusBar 식으로 이름을 짓는 편이 더 낫다.

- 변수 이름이 길어지는거에 전혀 개의치말라, 가독성이 훨씬 더 중요하다.

- 나중에 써야지 하고 변수 만들고, 까먹어서 안쓰는경우 매우매우많다.
-> 이럴때 절대로 안지운다 ㅋㅋㅋ

-----------------------------------------------------
김영준

클래스 명을 tTable, tTower, tEnemy 등으로 짓는 이유? 내 닉네임+클래스명
-> 안 헷갈릴라고? 이거 쓸데없는 짓이다. 
-> 이 코드를 읽는 다른사람에게 의아함만 불러일으키는 경우가 더 많다.
-> 차라리 클래스 안에 주석으로 써라(너를 나타내고싶으면)
-> 파일이름, 클래스안에 개입하지말라

★★ bg = { 'image' : load_image~, 'Position' : { 'X' : 400, 'Y' : 500 }, .. } 등으로 짓는거 좋네
-> 구조체보다 dictionary로 사용하는게 더 깔끔하고 좋아보인다.

class명을 BigBoy 같이 첫대문자로 지으면, 함수가 대문자로 시작될때랑 헷갈린다. 
-> 함수랑 클래스랑 구별해야 한다.

clip_draw 인자길이가 길어지면 draw 안에 중간변수를 따로 치환해서 쓰자 
-> 분리해주는게 더 가독성좋다. 

game_state.now is game_state.STATE.BUILD:  
패키지해서 집어넣는 경우는 그 자체를 외부에서 쓸 때 사용하는것, 내부에서 쓸 때는 그냥 만들고
import하는게 더 편하다. 일부가 밖에서 쓰이거나 다른 소스코드, 모듈을 가져다 쓸때에는 package를 해주는게맞는데
단독으로 쓰일 경우는 안에서 만들어라.

